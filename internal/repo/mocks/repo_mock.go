// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Blxssy/AvitoTest/internal/models"
	repo "github.com/Blxssy/AvitoTest/internal/repo"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockCoinRepository is a mock of CoinRepository interface.
type MockCoinRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCoinRepositoryMockRecorder
}

// MockCoinRepositoryMockRecorder is the mock recorder for MockCoinRepository.
type MockCoinRepositoryMockRecorder struct {
	mock *MockCoinRepository
}

// NewMockCoinRepository creates a new mock instance.
func NewMockCoinRepository(ctrl *gomock.Controller) *MockCoinRepository {
	mock := &MockCoinRepository{ctrl: ctrl}
	mock.recorder = &MockCoinRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinRepository) EXPECT() *MockCoinRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockCoinRepository) BeginTx(ctx context.Context) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockCoinRepositoryMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockCoinRepository)(nil).BeginTx), ctx)
}

// BuyItem mocks base method.
func (m *MockCoinRepository) BuyItem(ctx context.Context, params repo.BuyItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockCoinRepositoryMockRecorder) BuyItem(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockCoinRepository)(nil).BuyItem), ctx, params)
}

// CommitTx mocks base method.
func (m *MockCoinRepository) CommitTx(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockCoinRepositoryMockRecorder) CommitTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockCoinRepository)(nil).CommitTx), tx)
}

// CreateUser mocks base method.
func (m *MockCoinRepository) CreateUser(ctx context.Context, params repo.CreateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCoinRepositoryMockRecorder) CreateUser(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCoinRepository)(nil).CreateUser), ctx, params)
}

// DecreaseBalance mocks base method.
func (m *MockCoinRepository) DecreaseBalance(ctx context.Context, tx *sqlx.Tx, params repo.ChangeBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseBalance", ctx, tx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseBalance indicates an expected call of DecreaseBalance.
func (mr *MockCoinRepositoryMockRecorder) DecreaseBalance(ctx, tx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseBalance", reflect.TypeOf((*MockCoinRepository)(nil).DecreaseBalance), ctx, tx, params)
}

// GetBalance mocks base method.
func (m *MockCoinRepository) GetBalance(ctx context.Context, params repo.GetBalanceParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockCoinRepositoryMockRecorder) GetBalance(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockCoinRepository)(nil).GetBalance), ctx, params)
}

// GetItem mocks base method.
func (m *MockCoinRepository) GetItem(ctx context.Context, itemName string) (models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, itemName)
	ret0, _ := ret[0].(models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockCoinRepositoryMockRecorder) GetItem(ctx, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockCoinRepository)(nil).GetItem), ctx, itemName)
}

// GetPurchases mocks base method.
func (m *MockCoinRepository) GetPurchases(ctx context.Context, username string) ([]models.PurchaseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchases", ctx, username)
	ret0, _ := ret[0].([]models.PurchaseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchases indicates an expected call of GetPurchases.
func (mr *MockCoinRepositoryMockRecorder) GetPurchases(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchases", reflect.TypeOf((*MockCoinRepository)(nil).GetPurchases), ctx, username)
}

// GetTransactions mocks base method.
func (m *MockCoinRepository) GetTransactions(ctx context.Context, username string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, username)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockCoinRepositoryMockRecorder) GetTransactions(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockCoinRepository)(nil).GetTransactions), ctx, username)
}

// GetUserByUsername mocks base method.
func (m *MockCoinRepository) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockCoinRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockCoinRepository)(nil).GetUserByUsername), ctx, username)
}

// IncreaseBalance mocks base method.
func (m *MockCoinRepository) IncreaseBalance(ctx context.Context, tx *sqlx.Tx, params repo.ChangeBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseBalance", ctx, tx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseBalance indicates an expected call of IncreaseBalance.
func (mr *MockCoinRepositoryMockRecorder) IncreaseBalance(ctx, tx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseBalance", reflect.TypeOf((*MockCoinRepository)(nil).IncreaseBalance), ctx, tx, params)
}

// ReceivedCoinsInfo mocks base method.
func (m *MockCoinRepository) ReceivedCoinsInfo(ctx context.Context, username string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivedCoinsInfo", ctx, username)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceivedCoinsInfo indicates an expected call of ReceivedCoinsInfo.
func (mr *MockCoinRepositoryMockRecorder) ReceivedCoinsInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedCoinsInfo", reflect.TypeOf((*MockCoinRepository)(nil).ReceivedCoinsInfo), ctx, username)
}

// RollbackTx mocks base method.
func (m *MockCoinRepository) RollbackTx(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockCoinRepositoryMockRecorder) RollbackTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockCoinRepository)(nil).RollbackTx), tx)
}

// SaveTransaction mocks base method.
func (m *MockCoinRepository) SaveTransaction(ctx context.Context, params repo.SaveTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockCoinRepositoryMockRecorder) SaveTransaction(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockCoinRepository)(nil).SaveTransaction), ctx, params)
}
