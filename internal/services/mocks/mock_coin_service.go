// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/coin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Blxssy/AvitoTest/internal/models"
	services "github.com/Blxssy/AvitoTest/internal/services"
	gomock "github.com/golang/mock/gomock"
)

// MockCoinService is a mock of CoinService interface.
type MockCoinService struct {
	ctrl     *gomock.Controller
	recorder *MockCoinServiceMockRecorder
}

// MockCoinServiceMockRecorder is the mock recorder for MockCoinService.
type MockCoinServiceMockRecorder struct {
	mock *MockCoinService
}

// NewMockCoinService creates a new mock instance.
func NewMockCoinService(ctrl *gomock.Controller) *MockCoinService {
	mock := &MockCoinService{ctrl: ctrl}
	mock.recorder = &MockCoinServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinService) EXPECT() *MockCoinServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockCoinService) Auth(ctx context.Context, params services.AuthParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockCoinServiceMockRecorder) Auth(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockCoinService)(nil).Auth), ctx, params)
}

// BuyItem mocks base method.
func (m *MockCoinService) BuyItem(ctx context.Context, params services.BuyItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockCoinServiceMockRecorder) BuyItem(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockCoinService)(nil).BuyItem), ctx, params)
}

// GetBalance mocks base method.
func (m *MockCoinService) GetBalance(ctx context.Context, params services.GetBalanceParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockCoinServiceMockRecorder) GetBalance(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockCoinService)(nil).GetBalance), ctx, params)
}

// GetPurchases mocks base method.
func (m *MockCoinService) GetPurchases(ctx context.Context, params services.GetPurchasesParams) ([]models.PurchaseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchases", ctx, params)
	ret0, _ := ret[0].([]models.PurchaseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchases indicates an expected call of GetPurchases.
func (mr *MockCoinServiceMockRecorder) GetPurchases(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchases", reflect.TypeOf((*MockCoinService)(nil).GetPurchases), ctx, params)
}

// ReceivedCoinsInfo mocks base method.
func (m *MockCoinService) ReceivedCoinsInfo(ctx context.Context, params services.GetTransactionsParams) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivedCoinsInfo", ctx, params)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceivedCoinsInfo indicates an expected call of ReceivedCoinsInfo.
func (mr *MockCoinServiceMockRecorder) ReceivedCoinsInfo(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedCoinsInfo", reflect.TypeOf((*MockCoinService)(nil).ReceivedCoinsInfo), ctx, params)
}

// SendCoins mocks base method.
func (m *MockCoinService) SendCoins(ctx context.Context, params services.TransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockCoinServiceMockRecorder) SendCoins(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockCoinService)(nil).SendCoins), ctx, params)
}

// SendCoinsInfo mocks base method.
func (m *MockCoinService) SendCoinsInfo(ctx context.Context, params services.GetTransactionsParams) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsInfo", ctx, params)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCoinsInfo indicates an expected call of SendCoinsInfo.
func (mr *MockCoinServiceMockRecorder) SendCoinsInfo(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsInfo", reflect.TypeOf((*MockCoinService)(nil).SendCoinsInfo), ctx, params)
}
